diff -rupN linux-3.12.3-orig/drivers/net/wireless/rtl818x/rtl8187/dev.c linux-3.12.3/drivers/net/wireless/rtl818x/rtl8187/dev.c
--- linux-3.12.3-orig/drivers/net/wireless/rtl818x/rtl8187/dev.c	2013-12-10 08:26:46.862442766 -0500
+++ linux-3.12.3/drivers/net/wireless/rtl818x/rtl8187/dev.c	2013-12-10 08:27:45.073483723 -0500
@@ -252,8 +252,18 @@ static void rtl8187_tx(struct ieee80211_
 	flags |= RTL818X_TX_DESC_FLAG_NO_ENC;
 
 	flags |= ieee80211_get_tx_rate(dev, info)->hw_value << 24;
+	
+	// When this flag is set the firmware waits untill ALL fragments have
+	// reached the USB device. Then it sends the first fragment and waits
+	// for ACKS's. Of course in monitor mode it won't detect these ACK's.
 	if (ieee80211_has_morefrags(tx_hdr->frame_control))
-		flags |= RTL818X_TX_DESC_FLAG_MOREFRAG;
+	{
+		// If info->control.vif is NULL it's most likely in monitor mode
+		if (likely(info->control.vif != NULL && info->control.vif->type != NL80211_IFTYPE_MONITOR)) {
+			flags |= RTL818X_TX_DESC_FLAG_MOREFRAG;
+		}
+	}
+
 	if (info->control.rates[0].flags & IEEE80211_TX_RC_USE_RTS_CTS) {
 		flags |= RTL818X_TX_DESC_FLAG_RTS;
 		flags |= ieee80211_get_rts_cts_rate(dev, info)->hw_value << 19;
diff -rupN linux-3.12.3-orig/net/mac80211/cfg.c linux-3.12.3/net/mac80211/cfg.c
--- linux-3.12.3-orig/net/mac80211/cfg.c	2013-12-10 08:26:45.406588392 -0500
+++ linux-3.12.3/net/mac80211/cfg.c	2013-12-10 08:32:08.643478603 -0500
@@ -826,7 +826,8 @@ static int ieee80211_set_monitor_channel
 			ret = ieee80211_vif_use_channel(sdata, chandef,
 					IEEE80211_CHANCTX_EXCLUSIVE);
 		}
-	} else if (local->open_count == local->monitors) {
+       // Patch: Always allow channel change, even if a normal virtual interface is present
+       } else /*if (local->open_count == local->monitors)*/ {
 		local->_oper_chandef = *chandef;
 		ieee80211_hw_config(local, 0);
 	}
diff -rupN linux-3.12.3-orig/net/mac80211/tx.c linux-3.12.3/net/mac80211/tx.c
--- linux-3.12.3-orig/net/mac80211/tx.c	2013-12-10 08:26:45.406588392 -0500
+++ linux-3.12.3/net/mac80211/tx.c	2013-12-10 08:39:13.998832930 -0500
@@ -763,11 +763,19 @@ ieee80211_tx_h_sequence(struct ieee80211
 
 	/*
 	 * Packet injection may want to control the sequence
-	 * number, if we have no matching interface then we
-	 * neither assign one ourselves nor ask the driver to.
+	 * number, so if an injected packet is found, skip
+	 * renumbering it. Also make the packet NO_ACK to avoid
+	 * excessive retries (ACKing and retrying should be
+	 * handled by the injecting application).
+	 * FIXME This may break hostapd and some other injectors.
+	 * This should be done using a radiotap flag.
 	 */
-	if (unlikely(info->control.vif->type == NL80211_IFTYPE_MONITOR))
+	if (unlikely((info->flags & IEEE80211_TX_CTL_INJECTED) &&
+	   !(tx->sdata->u.mntr_flags & MONITOR_FLAG_COOK_FRAMES))) {
+		if (!ieee80211_has_morefrags(hdr->frame_control))
+			info->flags |= IEEE80211_TX_CTL_NO_ACK;
 		return TX_CONTINUE;
+	}
 
 	if (unlikely(ieee80211_is_ctl(hdr->frame_control)))
 		return TX_CONTINUE;
@@ -1478,7 +1486,10 @@ void ieee80211_xmit(struct ieee80211_sub
 		}
 	}
 
-	ieee80211_set_qos_hdr(sdata, skb);
+       // Don't overwrite QoS header in monitor mode
+       if (likely(info->control.vif->type != NL80211_IFTYPE_MONITOR)) {
+               ieee80211_set_qos_hdr(sdata, skb);
+       }
 	ieee80211_tx(sdata, skb, false, band);
 }
 
diff -rupN linux-3.12.3-orig/net/wireless/chan.c linux-3.12.3/net/wireless/chan.c
--- linux-3.12.3-orig/net/wireless/chan.c	2013-12-10 08:26:45.418587192 -0500
+++ linux-3.12.3/net/wireless/chan.c	2013-12-10 08:27:45.077483723 -0500
@@ -480,8 +480,10 @@ int cfg80211_set_monitor_channel(struct
 {
 	if (!rdev->ops->set_monitor_channel)
 		return -EOPNOTSUPP;
-	if (!cfg80211_has_monitors_only(rdev))
-		return -EBUSY;
+	// Always allow user to change channel, even if there is another normal
+	// virtual interface using the device.
+	//if (!cfg80211_has_monitors_only(rdev))
+	//	return -EBUSY;
 
 	return rdev_set_monitor_channel(rdev, chandef);
 }